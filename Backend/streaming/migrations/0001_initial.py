# Generated by Django 5.1.8 on 2025-04-16 07:11

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('games', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GameStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stream_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the stream', unique=True)),
                ('title', models.CharField(help_text='Title of the stream', max_length=200)),
                ('stream_url', models.URLField(help_text='URL to the video stream')),
                ('stream_key', models.CharField(help_text='Secret key for stream authentication', max_length=255, unique=True)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('PREPARING', 'Preparing'), ('LIVE', 'Live'), ('PAUSED', 'Paused'), ('ENDED', 'Ended'), ('TECHNICAL_DIFFICULTIES', 'Technical Difficulties'), ('CANCELLED', 'Cancelled')], db_index=True, default='SCHEDULED', help_text='Current status of the stream', max_length=25)),
                ('available_qualities', models.JSONField(default=list, help_text='List of available quality options')),
                ('default_quality', models.CharField(default='auto', help_text='Default quality setting for playback', max_length=10)),
                ('scheduled_start', models.DateTimeField(db_index=True, help_text='When the stream is scheduled to start')),
                ('actual_start', models.DateTimeField(blank=True, help_text='When the stream actually started', null=True)),
                ('actual_end', models.DateTimeField(blank=True, help_text='When the stream ended', null=True)),
                ('chat_enabled', models.BooleanField(default=True, help_text='Whether live chat is enabled for this stream')),
                ('dvr_enabled', models.BooleanField(default=True, help_text='Whether DVR functionality is enabled')),
                ('multiple_angles', models.BooleanField(default=False, help_text='Whether multiple camera angles are available')),
                ('peak_viewers', models.PositiveIntegerField(default=0, help_text='Peak number of concurrent viewers')),
                ('total_viewers', models.PositiveIntegerField(default=0, help_text='Total number of unique viewers')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.OneToOneField(help_text='Game this stream is for', on_delete=django.db.models.deletion.CASCADE, related_name='stream', to='games.game')),
            ],
            options={
                'verbose_name': 'Game Stream',
                'verbose_name_plural': 'Game Streams',
                'ordering': ['-scheduled_start'],
            },
        ),
        migrations.CreateModel(
            name='StreamAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_code', models.CharField(help_text='Unique code granting access to the stream', max_length=50, unique=True)),
                ('is_paid', models.BooleanField(db_index=True, default=False, help_text='Whether this access has been paid for')),
                ('is_complimentary', models.BooleanField(db_index=True, default=False, help_text='Whether this is complimentary (free) access')),
                ('max_quality', models.CharField(default='HD', help_text='Maximum quality allowed', max_length=10)),
                ('max_devices', models.PositiveSmallIntegerField(default=1, help_text='Maximum number of devices that can access simultaneously')),
                ('valid_from', models.DateTimeField(help_text='When access becomes valid')),
                ('valid_until', models.DateTimeField(help_text='When access expires')),
                ('last_accessed', models.DateTimeField(blank=True, help_text='When the stream was last accessed', null=True)),
                ('access_count', models.PositiveIntegerField(default=0, help_text='Number of times the stream has been accessed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment', models.OneToOneField(blank=True, help_text='Payment record for this access', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stream_access', to='accounts.payment')),
                ('stream', models.ForeignKey(help_text='Stream the user has access to', on_delete=django.db.models.deletion.CASCADE, related_name='viewer_accesses', to='streaming.gamestream')),
                ('user', models.ForeignKey(help_text='User who has access to the stream', on_delete=django.db.models.deletion.CASCADE, related_name='stream_accesses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Stream Access',
                'verbose_name_plural': 'Stream Accesses',
            },
        ),
        migrations.CreateModel(
            name='StreamingPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the streaming plan', max_length=100, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the plan and its features')),
                ('price', models.DecimalField(decimal_places=2, help_text='Monthly price of the plan', max_digits=10)),
                ('duration_days', models.PositiveIntegerField(default=30, help_text='Duration of the plan in days')),
                ('max_quality', models.CharField(choices=[('SD', 'Standard Definition (480p)'), ('HD', 'High Definition (720p)'), ('FHD', 'Full HD (1080p)'), ('UHD', '4K Ultra HD')], default='HD', help_text='Maximum streaming quality allowed by this plan', max_length=3)),
                ('max_devices', models.PositiveSmallIntegerField(default=1, help_text='Maximum number of devices that can stream simultaneously')),
                ('allows_dvr', models.BooleanField(default=False, help_text='Whether the plan allows DVR/recording capabilities')),
                ('allows_downloads', models.BooleanField(default=False, help_text='Whether the plan allows downloading for offline viewing')),
                ('allows_chat', models.BooleanField(default=True, help_text='Whether the plan allows access to live chat during streams')),
                ('allows_multiple_angles', models.BooleanField(default=False, help_text='Whether the plan allows viewing multiple camera angles')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this plan is currently available for purchase')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this plan in promotions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Streaming Plan',
                'verbose_name_plural': 'Streaming Plans',
                'ordering': ['price'],
                'indexes': [models.Index(fields=['is_active', 'price'], name='streaming_s_is_acti_064737_idx'), models.Index(fields=['max_quality'], name='streaming_s_max_qua_3e34df_idx')],
            },
        ),
        migrations.CreateModel(
            name='ViewerSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this viewing session', unique=True)),
                ('started_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When the viewing session started')),
                ('ended_at', models.DateTimeField(blank=True, help_text='When the viewing session ended', null=True)),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='When the session was last active')),
                ('selected_quality', models.CharField(default='auto', help_text='Quality level selected by the user', max_length=10)),
                ('average_bitrate', models.PositiveIntegerField(blank=True, help_text='Average bitrate during playback (kbps)', null=True)),
                ('average_framerate', models.FloatField(blank=True, help_text='Average framerate during playback (fps)', null=True)),
                ('connection_type', models.CharField(blank=True, help_text='Type of connection (wifi, cellular, etc.)', max_length=20)),
                ('isp', models.CharField(blank=True, help_text='Internet Service Provider', max_length=100)),
                ('buffer_count', models.PositiveIntegerField(default=0, help_text='Number of buffering events')),
                ('total_buffer_duration', models.PositiveIntegerField(default=0, help_text='Total buffering time in seconds')),
                ('latency', models.PositiveIntegerField(blank=True, help_text='Average latency in milliseconds', null=True)),
                ('dropped_frames', models.PositiveIntegerField(default=0, help_text='Number of dropped frames')),
                ('error_count', models.PositiveIntegerField(default=0, help_text='Number of playback errors')),
                ('last_error', models.CharField(blank=True, help_text='Last error message', max_length=255)),
                ('last_error_time', models.DateTimeField(blank=True, help_text='When the last error occurred', null=True)),
                ('device_type', models.CharField(blank=True, help_text='Type of device (desktop, mobile, tablet, etc.)', max_length=50)),
                ('browser', models.CharField(blank=True, help_text='Browser used', max_length=50)),
                ('os', models.CharField(blank=True, help_text='Operating system', max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the viewer', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('chat_messages_sent', models.PositiveIntegerField(default=0, help_text='Number of chat messages sent during the session')),
                ('stream', models.ForeignKey(help_text='Stream being viewed', on_delete=django.db.models.deletion.CASCADE, related_name='viewer_sessions', to='streaming.gamestream')),
                ('stream_access', models.ForeignKey(help_text='Access permission for this session', on_delete=django.db.models.deletion.CASCADE, related_name='viewer_sessions', to='streaming.streamaccess')),
                ('user', models.ForeignKey(help_text='User viewing the stream', on_delete=django.db.models.deletion.CASCADE, related_name='stream_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Viewer Session',
                'verbose_name_plural': 'Viewer Sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddIndex(
            model_name='gamestream',
            index=models.Index(fields=['status', '-scheduled_start'], name='streaming_g_status_0ca850_idx'),
        ),
        migrations.AddIndex(
            model_name='gamestream',
            index=models.Index(fields=['game'], name='streaming_g_game_id_b9cdd8_idx'),
        ),
        migrations.AddIndex(
            model_name='gamestream',
            index=models.Index(fields=['stream_id'], name='streaming_g_stream__0b7a46_idx'),
        ),
        migrations.AddIndex(
            model_name='streamaccess',
            index=models.Index(fields=['user', 'valid_until'], name='streaming_s_user_id_d0214f_idx'),
        ),
        migrations.AddIndex(
            model_name='streamaccess',
            index=models.Index(fields=['stream', 'is_paid'], name='streaming_s_stream__223e3f_idx'),
        ),
        migrations.AddIndex(
            model_name='streamaccess',
            index=models.Index(fields=['access_code'], name='streaming_s_access__e8331d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='streamaccess',
            unique_together={('user', 'stream')},
        ),
        migrations.AddIndex(
            model_name='viewersession',
            index=models.Index(fields=['user', '-started_at'], name='streaming_v_user_id_39bdb8_idx'),
        ),
        migrations.AddIndex(
            model_name='viewersession',
            index=models.Index(fields=['stream', '-started_at'], name='streaming_v_stream__1771eb_idx'),
        ),
        migrations.AddIndex(
            model_name='viewersession',
            index=models.Index(fields=['stream_access'], name='streaming_v_stream__0b0974_idx'),
        ),
        migrations.AddIndex(
            model_name='viewersession',
            index=models.Index(fields=['session_id'], name='streaming_v_session_f02885_idx'),
        ),
    ]
